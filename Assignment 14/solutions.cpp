#include <bits/stdc++.h>
using namespace std;

class ListNode
{
public:
    int val;
    ListNode *next;
    ListNode *bottom;
    ListNode *random;

    ListNode(int val)
    {
        this->val = val;
        this->next = NULL;
        this->bottom = NULL;
        this->random = NULL;
    }
};

/*
Given a linked list ofÂ **N**Â nodes such that it may contain a loop.

A loop here means that the last ListNode of the link list is connected to the ListNode at position X(1-based index). If the link list does not have any loop, X=0.

Remove the loop from the linked list, if it is present, i.e. unlink the last ListNode which is forming the loop.
*/

void removeCycle(ListNode *head)
{
    ListNode *slow = head, *fast = head;
    bool flag = false;
    while (fast && fast->next)
    {
        slow = slow->next;
        fast = fast->next->next;
        if (slow == fast)
        {
            flag = true;
            break;
        }
    }
    if (flag)
    {
        slow = head;
        ListNode *temp;
        while (slow != fast)
        {
            temp = fast;
            slow = slow->next;
            fast = fast->next;
        }
        temp->next = NULL;
    }
}

/*
A numberÂ NÂ is represented in Linked List such that each digit corresponds to a ListNode in linked list. You need to add 1 to it.
*/

int addOne(ListNode *head)
{
    queue<int> q;
    while (head != NULL)
    {
        q.push(head->val);
        head = head->next;
    }
    int ans = 0;
    while (!q.empty())
    {
        ans = ans * 10 + q.front();
        q.pop();
    }
    return ans + 1;
}

/*
Given a Linked List of size N, where every ListNode represents a sub-linked-list and contains two pointers:(i) aÂ nextÂ pointer to the next ListNode,(ii) aÂ bottomÂ pointerÂ to a linked list where this ListNode is head.Each of theÂ sub-linked-list is in sorted order.Flatten the Link List such that all the nodes appear in a single level while maintaining the sorted order.Â Note:Â The flattened list will be printed using the bottom pointer instead of next pointer.
*/

ListNode *flatterMultilevelLinkedList(ListNode *head)
{
}

/*
You are given a specialÂ linked listÂ withÂ **N**Â nodes where each ListNode has aÂ next pointer pointing to itsÂ next ListNode. You are also givenÂ **M**Â random pointers, where you will be givenÂ **M**Â number of pairs denoting two nodesÂ **a**Â andÂ **b**Â Â **i.e.Â a->arb = b**Â (arb is pointer to random ListNode)**.**

Construct a copy of the given list. The copy should consist of exactlyÂ **N**Â new nodes, where each new ListNode has its value set to the value of its corresponding original ListNode. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.

For example, if there are two nodesÂ **X**Â andÂ **Y**Â in the original list, whereÂ **X.arb**Â **-->**Â **Y**, then for the corresponding two nodesÂ **x**Â andÂ **y**Â in the copied list,Â **x.arb --> y.**
*/
ListNode *copyRandomList(ListNode *head)
{
    unordered_map<ListNode *, ListNode *> m;
    ListNode *cursor = head;
    while (cursor)
    {
        ListNode *temp = new ListNode(cursor->val);
        m[cursor] = temp;
        cursor = cursor->next;
    }
    cursor = head;
    while (cursor)
    {
        if (cursor->next != NULL)
            m[cursor]->next = m[cursor->next];
        if (cursor->random != NULL)
            m[cursor]->random = m[cursor->random];
        cursor = cursor->next;
    }

    return m[head];
}

/*
Given theÂ `head`Â of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and returnÂ *the reordered list*.

TheÂ **first**Â node is consideredÂ **odd**, and theÂ **second**Â node isÂ **even**, and so on.

Note that the relative order inside both the even and odd groups should remain as it was in the input.

You must solve the problemÂ inÂ `O(1)`Â extra space complexity andÂ `O(n)`Â time complexity.
*/

ListNode *oddEven(ListNode *head)
{
    ListNode *odd = new ListNode(-1);
    ListNode *even = new ListNode(-1);
    ListNode *t1 = odd, *t2 = even;
    int count = 1;
    while (head)
    {
        if (count % 2 == 0)
        {
            t2->next = head;
            t2 = t2->next;
        }
        else
        {
            t1->next = head;
            t1 = t1->next;
        }
        count++;
        head = head->next;
    }
    t1->next = even;
    t2->next = NULL;

    return odd;
}

/*
Given a singly linked list of sizeÂ N. The task is toÂ left-shiftÂ the linked list byÂ kÂ nodes, whereÂ kÂ is a given positive integer smaller than or equal to length of the linked list
*/

ListNode *leftShift(ListNode *head, int k)
{
    ListNode *temp = head;
    k--;
    while (k--)
    {
        temp = temp->next;
    }
    ListNode *newHead = temp->next;
    temp->next = NULL;
    temp = newHead;
    while (temp->next)
    {
        temp = temp->next;
    }
    temp->next = head;
    return newHead;
}

/*
You are given theÂ `head`Â of a linked list withÂ `n`Â nodes.

For each node in the list, find the value of theÂ **next greater node**. That is, for each node, find the value of the first node that is next to it and has aÂ **strictly larger**Â value than it.

Return an integer arrayÂ `answer`Â whereÂ `answer[i]`Â is the value of the next greater node of theÂ `ith`Â node (**1-indexed**). If theÂ `ith`Â node does not have a next greater node, setÂ `answer[i] = 0`.
*/

int size(ListNode *head)
{
    ListNode *temp = head;
    int sz = 0;
    while (temp)
    {
        temp = temp->next;
        sz++;
    }
    return sz;
}

vector<int> nextGreaterNode(ListNode *head)
{
    int sz = size(head);
    vector<int> ans(sz + 1, 0);
    stack<pair<int, int>> st;
    int count = 1;
    while (head)
    {
        if (!st.empty() && head->val > st.top().first)
        {
            int g = head->val;
            while (!st.empty() && g > st.top().first)
            {
                ans[st.top().second] = g;
                st.pop();
            }
        }
        st.push({head->val, count++});
        head = head->next;
    }
    return ans;
}

/*
<aside>
ðŸ’¡ **Question 8**

Given theÂ `head`Â of a linked list, we repeatedly delete consecutive sequences of nodes that sum toÂ `0`Â until there are no such sequences.

After doing so, return the head of the final linked list.Â  You may return any such answer.

(Note that in the examples below, all sequences are serializations ofÂ `ListNode`Â objects.)

</aside>
*/

ListNode *removeZeroSumSublists(ListNode *head)
{

    ListNode *root = new ListNode(0);
    root->next = head;
    unordered_map<int, ListNode *> um;
    um[0] = root;
    int ac = 0;

    while (head != NULL)
    {
        ac += head->val;

        if (um.find(ac) != um.end())
        {
            ListNode *prev = um[ac];
            ListNode *start = prev;

            int aux = ac;
            while (prev != head)
            {
                prev = prev->next;
                aux += prev->val;
                if (prev != head)
                    um.erase(aux);
            }

            start->next = head->next;
        }
        else
        {
            um[ac] = head;
        }

        head = head->next;
    }

    return root->next;
}